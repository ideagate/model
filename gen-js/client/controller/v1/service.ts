// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "client/controller/v1/service.proto" (package "v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Workflow } from "../../../core/endpoint/endpoint";
import { Endpoint } from "../../../core/endpoint/endpoint";
/**
 * @generated from protobuf message v1.GetListEndpointRequest
 */
export interface GetListEndpointRequest {
}
/**
 * @generated from protobuf message v1.GetListEndpointResponse
 */
export interface GetListEndpointResponse {
    /**
     * @generated from protobuf field: repeated endpoint.Endpoint endpoints = 1;
     */
    endpoints: Endpoint[];
}
/**
 * @generated from protobuf message v1.GetWorkflowRequest
 */
export interface GetWorkflowRequest {
    /**
     * @generated from protobuf field: string entrypoint_id = 1;
     */
    entrypointId: string;
}
/**
 * @generated from protobuf message v1.GetWorkflowResponse
 */
export interface GetWorkflowResponse {
    /**
     * @generated from protobuf field: endpoint.Workflow workflow = 1;
     */
    workflow?: Workflow;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetListEndpointRequest$Type extends MessageType<GetListEndpointRequest> {
    constructor() {
        super("v1.GetListEndpointRequest", []);
    }
    create(value?: PartialMessage<GetListEndpointRequest>): GetListEndpointRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetListEndpointRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetListEndpointRequest): GetListEndpointRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetListEndpointRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.GetListEndpointRequest
 */
export const GetListEndpointRequest = new GetListEndpointRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetListEndpointResponse$Type extends MessageType<GetListEndpointResponse> {
    constructor() {
        super("v1.GetListEndpointResponse", [
            { no: 1, name: "endpoints", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Endpoint }
        ]);
    }
    create(value?: PartialMessage<GetListEndpointResponse>): GetListEndpointResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.endpoints = [];
        if (value !== undefined)
            reflectionMergePartial<GetListEndpointResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetListEndpointResponse): GetListEndpointResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated endpoint.Endpoint endpoints */ 1:
                    message.endpoints.push(Endpoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetListEndpointResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated endpoint.Endpoint endpoints = 1; */
        for (let i = 0; i < message.endpoints.length; i++)
            Endpoint.internalBinaryWrite(message.endpoints[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.GetListEndpointResponse
 */
export const GetListEndpointResponse = new GetListEndpointResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWorkflowRequest$Type extends MessageType<GetWorkflowRequest> {
    constructor() {
        super("v1.GetWorkflowRequest", [
            { no: 1, name: "entrypoint_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetWorkflowRequest>): GetWorkflowRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entrypointId = "";
        if (value !== undefined)
            reflectionMergePartial<GetWorkflowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWorkflowRequest): GetWorkflowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string entrypoint_id */ 1:
                    message.entrypointId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWorkflowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string entrypoint_id = 1; */
        if (message.entrypointId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.entrypointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.GetWorkflowRequest
 */
export const GetWorkflowRequest = new GetWorkflowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWorkflowResponse$Type extends MessageType<GetWorkflowResponse> {
    constructor() {
        super("v1.GetWorkflowResponse", [
            { no: 1, name: "workflow", kind: "message", T: () => Workflow }
        ]);
    }
    create(value?: PartialMessage<GetWorkflowResponse>): GetWorkflowResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetWorkflowResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWorkflowResponse): GetWorkflowResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* endpoint.Workflow workflow */ 1:
                    message.workflow = Workflow.internalBinaryRead(reader, reader.uint32(), options, message.workflow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWorkflowResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* endpoint.Workflow workflow = 1; */
        if (message.workflow)
            Workflow.internalBinaryWrite(message.workflow, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.GetWorkflowResponse
 */
export const GetWorkflowResponse = new GetWorkflowResponse$Type();
/**
 * @generated ServiceType for protobuf service v1.ControllerService
 */
export const ControllerService = new ServiceType("v1.ControllerService", [
    { name: "GetListEndpoint", options: {}, I: GetListEndpointRequest, O: GetListEndpointResponse },
    { name: "GetWorkflow", options: {}, I: GetWorkflowRequest, O: GetWorkflowResponse }
]);
