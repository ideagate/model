// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dashboard/project.proto" (package "dashboard", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "../google/protobuf/struct";
import { Project } from "../core/project/project";
/**
 * @generated from protobuf message dashboard.GetListProjectRequest
 */
export interface GetListProjectRequest {
}
/**
 * @generated from protobuf message dashboard.GetListProjectResponse
 */
export interface GetListProjectResponse {
    /**
     * @generated from protobuf field: repeated project.Project projects = 1;
     */
    projects: Project[];
}
/**
 * @generated from protobuf message dashboard.CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * @generated from protobuf field: string project_id = 1;
     */
    projectId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message dashboard.CreateProjectResponse
 */
export interface CreateProjectResponse {
}
/**
 * @generated from protobuf message dashboard.UpdateProjectRequest
 */
export interface UpdateProjectRequest {
    /**
     * @generated from protobuf field: string project_id = 1;
     */
    projectId: string;
    /**
     * @generated from protobuf field: google.protobuf.Struct values = 2;
     */
    values?: Struct;
}
/**
 * @generated from protobuf message dashboard.UpdateProjectResponse
 */
export interface UpdateProjectResponse {
}
/**
 * @generated from protobuf message dashboard.DeleteProjectRequest
 */
export interface DeleteProjectRequest {
    /**
     * @generated from protobuf field: string project_id = 1;
     */
    projectId: string;
}
/**
 * @generated from protobuf message dashboard.DeleteProjectResponse
 */
export interface DeleteProjectResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class GetListProjectRequest$Type extends MessageType<GetListProjectRequest> {
    constructor() {
        super("dashboard.GetListProjectRequest", []);
    }
    create(value?: PartialMessage<GetListProjectRequest>): GetListProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetListProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetListProjectRequest): GetListProjectRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetListProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.GetListProjectRequest
 */
export const GetListProjectRequest = new GetListProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetListProjectResponse$Type extends MessageType<GetListProjectResponse> {
    constructor() {
        super("dashboard.GetListProjectResponse", [
            { no: 1, name: "projects", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Project }
        ]);
    }
    create(value?: PartialMessage<GetListProjectResponse>): GetListProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projects = [];
        if (value !== undefined)
            reflectionMergePartial<GetListProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetListProjectResponse): GetListProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated project.Project projects */ 1:
                    message.projects.push(Project.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetListProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated project.Project projects = 1; */
        for (let i = 0; i < message.projects.length; i++)
            Project.internalBinaryWrite(message.projects[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.GetListProjectResponse
 */
export const GetListProjectResponse = new GetListProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectRequest$Type extends MessageType<CreateProjectRequest> {
    constructor() {
        super("dashboard.CreateProjectRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateProjectRequest>): CreateProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectRequest): CreateProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.CreateProjectRequest
 */
export const CreateProjectRequest = new CreateProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProjectResponse$Type extends MessageType<CreateProjectResponse> {
    constructor() {
        super("dashboard.CreateProjectResponse", []);
    }
    create(value?: PartialMessage<CreateProjectResponse>): CreateProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateProjectResponse): CreateProjectResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.CreateProjectResponse
 */
export const CreateProjectResponse = new CreateProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateProjectRequest$Type extends MessageType<UpdateProjectRequest> {
    constructor() {
        super("dashboard.UpdateProjectRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "values", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<UpdateProjectRequest>): UpdateProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateProjectRequest): UpdateProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                case /* google.protobuf.Struct values */ 2:
                    message.values = Struct.internalBinaryRead(reader, reader.uint32(), options, message.values);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        /* google.protobuf.Struct values = 2; */
        if (message.values)
            Struct.internalBinaryWrite(message.values, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.UpdateProjectRequest
 */
export const UpdateProjectRequest = new UpdateProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateProjectResponse$Type extends MessageType<UpdateProjectResponse> {
    constructor() {
        super("dashboard.UpdateProjectResponse", []);
    }
    create(value?: PartialMessage<UpdateProjectResponse>): UpdateProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateProjectResponse): UpdateProjectResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.UpdateProjectResponse
 */
export const UpdateProjectResponse = new UpdateProjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectRequest$Type extends MessageType<DeleteProjectRequest> {
    constructor() {
        super("dashboard.DeleteProjectRequest", [
            { no: 1, name: "project_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteProjectRequest>): DeleteProjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectRequest): DeleteProjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string project_id */ 1:
                    message.projectId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteProjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string project_id = 1; */
        if (message.projectId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.DeleteProjectRequest
 */
export const DeleteProjectRequest = new DeleteProjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteProjectResponse$Type extends MessageType<DeleteProjectResponse> {
    constructor() {
        super("dashboard.DeleteProjectResponse", []);
    }
    create(value?: PartialMessage<DeleteProjectResponse>): DeleteProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteProjectResponse): DeleteProjectResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.DeleteProjectResponse
 */
export const DeleteProjectResponse = new DeleteProjectResponse$Type();
