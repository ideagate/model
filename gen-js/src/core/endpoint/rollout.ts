// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "core/endpoint/rollout.proto" (package "endpoint", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message endpoint.RolloutBlueGreen
 */
export interface RolloutBlueGreen {
    /**
     * @generated from protobuf field: string green_workflow_version = 1;
     */
    greenWorkflowVersion: string;
    /**
     * @generated from protobuf field: string blue_workflow_version = 2;
     */
    blueWorkflowVersion: string;
}
/**
 * @generated from protobuf message endpoint.RolloutCanary
 */
export interface RolloutCanary {
}
// @generated message type with reflection information, may provide speed optimized methods
class RolloutBlueGreen$Type extends MessageType<RolloutBlueGreen> {
    constructor() {
        super("endpoint.RolloutBlueGreen", [
            { no: 1, name: "green_workflow_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "blue_workflow_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RolloutBlueGreen>): RolloutBlueGreen {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.greenWorkflowVersion = "";
        message.blueWorkflowVersion = "";
        if (value !== undefined)
            reflectionMergePartial<RolloutBlueGreen>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RolloutBlueGreen): RolloutBlueGreen {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string green_workflow_version */ 1:
                    message.greenWorkflowVersion = reader.string();
                    break;
                case /* string blue_workflow_version */ 2:
                    message.blueWorkflowVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RolloutBlueGreen, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string green_workflow_version = 1; */
        if (message.greenWorkflowVersion !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.greenWorkflowVersion);
        /* string blue_workflow_version = 2; */
        if (message.blueWorkflowVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.blueWorkflowVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message endpoint.RolloutBlueGreen
 */
export const RolloutBlueGreen = new RolloutBlueGreen$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RolloutCanary$Type extends MessageType<RolloutCanary> {
    constructor() {
        super("endpoint.RolloutCanary", []);
    }
    create(value?: PartialMessage<RolloutCanary>): RolloutCanary {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RolloutCanary>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RolloutCanary): RolloutCanary {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RolloutCanary, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message endpoint.RolloutCanary
 */
export const RolloutCanary = new RolloutCanary$Type();
