// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "core/endpoint/variable.proto" (package "endpoint", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message endpoint.Variable
 */
export interface Variable {
    /**
     * @generated from protobuf field: endpoint.VariableType type = 1;
     */
    type: VariableType;
    /**
     * @generated from protobuf field: bool required = 2;
     */
    required: boolean;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
    /**
     * @generated from protobuf field: string default = 4;
     */
    default: string;
}
/**
 * @generated from protobuf enum endpoint.VariableType
 */
export enum VariableType {
    /**
     * @generated from protobuf enum value: VARIABLE_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: VARIABLE_TYPE_STRING = 1;
     */
    STRING = 1,
    /**
     * @generated from protobuf enum value: VARIABLE_TYPE_INT = 2;
     */
    INT = 2,
    /**
     * @generated from protobuf enum value: VARIABLE_TYPE_FLOAT = 3;
     */
    FLOAT = 3,
    /**
     * @generated from protobuf enum value: VARIABLE_TYPE_BOOL = 4;
     */
    BOOL = 4,
    /**
     * @generated from protobuf enum value: VARIABLE_TYPE_OBJECT = 5;
     */
    OBJECT = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class Variable$Type extends MessageType<Variable> {
    constructor() {
        super("endpoint.Variable", [
            { no: 1, name: "type", kind: "enum", T: () => ["endpoint.VariableType", VariableType, "VARIABLE_TYPE_"] },
            { no: 2, name: "required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "default", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Variable>): Variable {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.required = false;
        message.value = "";
        message.default = "";
        if (value !== undefined)
            reflectionMergePartial<Variable>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Variable): Variable {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* endpoint.VariableType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bool required */ 2:
                    message.required = reader.bool();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                case /* string default */ 4:
                    message.default = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Variable, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* endpoint.VariableType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bool required = 2; */
        if (message.required !== false)
            writer.tag(2, WireType.Varint).bool(message.required);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        /* string default = 4; */
        if (message.default !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.default);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message endpoint.Variable
 */
export const Variable = new Variable$Type();
